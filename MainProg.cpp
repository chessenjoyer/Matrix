#include <iostream>
using namespace std;
#include "MATRIX.h"

//Разработать класс для представления объекта матрица, состоящая из элементов типа int.
//Определить конструктор с двумя параметрами целого типа(размеры матрицы), который можно использовать как конструктор умолчания.
//Определить конструктор, который создаёт новую матрицу таким образом, что все её элементы больше элементов другой матрицы на заданное число, 
//и который можно использовать как конструктор копирования.
//Определить деструктор.
//Определить преобразования из переменной типа int в матрицу(создание матрицы из 1 строки и 1 столбца) 
//и из матрицы в переменную типа double(вычисление среднего арифметического элементов матрицы).

int main()
{
    MATRIX M;           // вызов конструктора умолчания
    M.Print("M");

    MATRIX M2(2u, 3u);  // вызов конструктора с параметрами            (MATRIX<int> M2(2, 3); - это если с шаблоном делать)
    M2.Print("M2");

    // заполнить матрицу значениями
    int i, j;
    for (i = 0; i < 2; i++)
        for (j = 0; j < 3; j++)
            M2.SetMij(i, j, i + j);
    M2.Print("M2");

    MATRIX M3(M2, 3); // вызов конструктора копирования (можно еще так: MATRIX M3 = M2;)
    M3.Print("M3");

    cout << "An integer number\n" << (int)M3 << endl << endl; // перевести матрицу в число типа int

    MATRIX M4(8);  // перевести число типа int в матрицу
    M3.Print("M4");

    MATRIX M5; // вызов оператора присваивания - проверка
    M5 = M2;
    M5.Print("M5");

    cout << "M2[0][0] = " << M2[0][0] << endl << endl;

    MATRIX C = M3 - M2;
    C.Print("C = M3 - M2");
    MATRIX D = M5 + M2;
    D.Print("D = M5 + M2");
    C += 1;
    C.Print("C += 1");
    if (M2 == M5)
        cout << "M2 = M5" << endl;

    return 1;
}